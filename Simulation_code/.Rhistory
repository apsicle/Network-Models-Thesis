}
results <- sapply(runs, mysolution)
data.frame(N = runs, Results = results)
}
average <- function(n, k) {
#gets distribution of results
fourteen(n, k)
}
average(100,100)
source('~/.active-rstudio-document', echo=TRUE)
average(100,100)
=======
scale_x_log10(limits = c(0.0001, 1)) + xlab("Rewiring Probability") + ylab("Time(p)") +
ylim(0, 1) + ggtitle("Plots with descending immigration (v) and increasing birth (b)") +
theme_bw() + theme(axis.text = element_text(size = 12), axis.title = element_text(size = 16),
legend.text = element_text(size = 10), legend.title = element_text(size = 12),
plot.title = element_text(size = 18))
p
}
plot_all(test1,test2,test3)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?element_text
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/Ryan/Desktop/Thesis/smallworld.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
test3 <- run_stats(1, 50, 2, 11, 1000, 0.001, 0.1)
plot_all(test1,test2,test3)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
options(scipen= 10000)
plot_all(test1,test2,test3)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot_prob(test1, cpath = testnew)
.libPaths()
debug(rewire)
rewire(g, each_edge(p = 0.1, loops = FALSE)
)
rewire(g, each_edge(p = 0.1, loops = FALSE)
)
getMethod("rewire")
View(testnew)
View(test3)
View(test3)
View(test)
plot_prob(rec1, testnew)
plot_prob(rec1, cpath = testnew)
plot_prob(rec1, cpath = test)
plot_prob(rec1, cpath = testnew)
test1 <- find_cpath(11, 20)
plot_prob(rec1, cpath = testnew)
source('~/.active-rstudio-document', echo=TRUE)
test <- find_cpath(11, 20)
plot_prob(test3, cpath = test)
plot_prob(test3, cpath = testnew)
plot_prob(test3, cpath = test)
find_cpath <- function(splits, aggregate_runs) {
aggregate <- rep(0, splits + 1)
points <- gen_log_points(0.0001,1,splits, 10)
points <- c(0, points)
for(i in 0:splits) {
record <- rep(0, aggregate_runs)
for(j in 1:aggregate_runs) {
g <- sample_smallworld(dim = 1, size = 1000, nei = 10, p = points[i+1])
record[j] <- mean_distance(g, directed = FALSE)
#record[j] <- transitivity(g, type = "global", isolates = "NaN")
}
aggregate[i+1] <- mean(record, na.rm = TRUE)
}
#deterministic sim. stop when threshold reached in opposite side.
df <- data.frame("prob" = points, "length" = aggregate)
df
}
test <- find_cpath(11, 20)
plot_prob(rec1, cpath = test)
plot_prob(rec1, cpath = testnew)
plot_prob(rec1, cpath = test)
plot_prob(rec1, cpath = testnew)
View(test)
View(test)
19.754695/25.475475
plot_prob(rec1, cpath = test)
plot_prob(rec1, cpath = testnew)
p
is.na(p)
x
x <- x +
3
check <- function() {
exists(p)
}
check()
exists(p)
?exists
check <- function() {
exists("p")
}
check()
check <- function() {
exists("p", where = sys.frame)
}
check()
check <- function() {
exists("p", where = sys.frame(frame))
}
check()
environmentName
environmentName()
Sys.getLocale()
Sys.getlocale()
Sys.getenv()
Sys.getenv(p)
environment()
check <- function() {
exists("p", where = environment())
}
check()
check <- function() {
print(environment())
exists("p", where = environment())
}
check <- function() {
print(environment())
exists("p", where = environment())
}
check()
check <- function() {
environment()
exists("p", where = environment())
}
check()
.libPaths()
View(stochastic)
source("params.R")
param(3, 0.01, 0.01, 0.01, 5000, 100)
source("stochastic_sim_nd.R")
source("deterministic_ode.R")
source("make_plots.R")
make_plots <- function(determ_df = out, stoch_df = stochastic, map_df = out_map) {
names(map_df)[-1] <- 1:parameters$dimension
map_df <- melt(map_df, id.vars = "time", variable.name = "patch",
value.name = "population")
map_df <- cbind(map_df, "model" = "map")
determ_df <- data.frame(determ_df)
names(determ_df)[-1] <- 1:parameters$dimension
determ_df <- melt(determ_df, id.vars = "time", variable.name = "patch",
value.name = "population")
determ_df <- cbind(determ_df, "model" = "determ")
names(stoch_df)[-1] <- 1:parameters$dimension
stoch_df <- melt(stoch_df, id.vars = "Time", variable.name = "patch",
value.name = "population")
stoch_df <- cbind(stoch_df, "model" = "stoch")
p <- ggplot() +
geom_line(data = determ_df, aes(x = time, y = population, color = patch, linetype = model)) +
geom_line(data = stoch_df, aes(x = Time, y = population, color = patch, linetype = model)) +
geom_line(data = map_df, aes(x = time, y = population, color = patch, linetype = model)) +
theme(axis.text = element_text(size = 12), axis.title = element_text(size = 16, margin = margin(t = 20, l = 20, r = 20)),
legend.text = element_text(size = 10), legend.title = element_text(size = 12, margin = margin(t = 10)),
plot.title = element_text(size = 18,margin = margin(b = 30))) + guides(colour = guide_legend(title.position = "top", title.hjust = 0.5))
}
make_plots <- function(determ_df = out, stoch_df = stochastic, map_df = out_map) {
names(map_df)[-1] <- 1:parameters$dimension
map_df <- melt(map_df, id.vars = "time", variable.name = "patch",
value.name = "population")
map_df <- cbind(map_df, "model" = "map")
determ_df <- data.frame(determ_df)
names(determ_df)[-1] <- 1:parameters$dimension
determ_df <- melt(determ_df, id.vars = "time", variable.name = "patch",
value.name = "population")
determ_df <- cbind(determ_df, "model" = "determ")
names(stoch_df)[-1] <- 1:parameters$dimension
stoch_df <- melt(stoch_df, id.vars = "Time", variable.name = "patch",
value.name = "population")
stoch_df <- cbind(stoch_df, "model" = "stoch")
p <- ggplot() +
geom_line(data = determ_df, aes(x = time, y = population, color = patch, linetype = model)) +
#geom_line(data = stoch_df, aes(x = Time, y = population, color = patch, linetype = model)) +
geom_points(data = map_df, aes(x = time, y = population, color = patch, linetype = model)) +
theme(axis.text = element_text(size = 12), axis.title = element_text(size = 16, margin = margin(t = 20, l = 20, r = 20)),
legend.text = element_text(size = 10), legend.title = element_text(size = 12, margin = margin(t = 10)),
plot.title = element_text(size = 18,margin = margin(b = 30))) + guides(colour = guide_legend(title.position = "top", title.hjust = 0.5))
}
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p <- p + ggtitle("dim = 2, v = 0.001, {b,d} = 0.01, K = 500, times = 1000")
p
source('C:/Users/Ryan/Desktop/Thesis/make_plots.R', echo=TRUE)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p <- p + ggtitle("dim = 2, v = 0.001, {b,d} = 0.01, K = 500, times = 1000")
p
param(2, .001, 0.01, 0.01, 500, 1000)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p <- p + ggtitle("dim = 2, v = 0.001, {b,d} = 0.01, K = 500, times = 1000")
p
determ_df <- data.frame(determ_df)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p <- p + ggtitle("dim = 2, v = 0.001, {b,d} = 0.01, K = 500, times = 1000")
p
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
View(determ_df)
View(out_map)
View(determ_df)
source('~/.active-rstudio-document', echo=TRUE)
p <- make_plots()
p
param(3, 0.01, 0.01, 0.01, 5000, 100)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p <- p + ggtitle("dim = 2, v = 0.001, {b,d} = 0.01, K = 500, times = 1000")
p
param(2, .001, 0.01, 0.01, 500, 1000)
param(2, 0.01, 0.01, 0.01, 5000, 100)
source('C:/Users/Ryan/Desktop/Thesis/make_plots.R', echo=TRUE)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p <- p + ggtitle("dim = 2, v = 0.001, {b,d} = 0.01, K = 500, times = 1000")
p
param(2, 0.01, 0.01, 0.01, 5000, 1000)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p <- p + ggtitle("dim = 2, v = 0.001, {b,d} = 0.01, K = 500, times = 1000")
p
View(out_map)
source('~/.active-rstudio-document', echo=TRUE)
param(2, .001, 0.01, 0.01, 500, 1000)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p <- p + ggtitle("dim = 2, v = 0.001, {b,d} = 0.01, K = 500, times = 1000")
p
source('C:/Users/Ryan/Desktop/Thesis/make_plots.R', echo=TRUE)
param(2, .001, 0.01, 0.01, 500, 1000)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p <- p + ggtitle("dim = 2, v = 0.001, {b,d} = 0.01, K = 500, times = 1000")
p
source('~/.active-rstudio-document', echo=TRUE)
p <- make_plots()
#p <- p + ggtitle("dim = 3, v = .001, {b,d} = 0.01, K = 500, times = 1000")
p
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/Ryan/Desktop/Thesis/make_plots.R', echo=TRUE)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P,  v, state, r_0 = b, t = max(times))
p <- make_plots()
p
source('C:/Users/Ryan/Desktop/Thesis/make_plots.R', echo=TRUE)
param(2, .001, 0.01, 0.01, 500, 1000)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P,  v, state, r_0 = b, t = max(times))
p <- make_plots()
p
source('~/.active-rstudio-document', echo=TRUE)
p <- make_plots()
p
source('C:/Users/Ryan/Desktop/Thesis/make_plots.R', echo=TRUE)
p <- make_plots()
p
source('~/.active-rstudio-document', echo=TRUE)
source("params.R")
param(2, 0.01, 0.01, 0.01, 5000, 1000)
source("stochastic_sim_nd.R")
source("deterministic_ode.R")
source("make_plots.R")
param(2, .001, 0.01, 0.01, 500, 1000)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p
source('~/.active-rstudio-document', echo=TRUE)
p <- make_plots()
#p <- p + ggtitle("dim = 2, v = 0.001, {b,d} = 0.01, K = 500, times = 1000")
p
param(2, .25, 0.01, 0.01, 500, 1000)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p
param(3, .25, 0.01, 0.01, 5000, 1000)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P,  v, state, r_0 = b, t = max(times))
p <- make_plots()
p
param(3, .01, 0.01, 0.01, 500, 1000)
system.time(stochastic <- stochastic_sim(P, b, d, state, max(times), K, v))
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P,  v, state, r_0 = b, t = max(times))
p <- make_plots()
#p <- p + ggtitle("dim = 3, v = .001, {b,d} = 0.01, K = 500, times = 1000")
p
source('~/.active-rstudio-document', echo=TRUE)
p <- make_plots()
p
source('~/.active-rstudio-document', echo=TRUE)
p <- make_plots()
p
source('C:/Users/Ryan/Desktop/Thesis/make_plots.R', echo=TRUE)
out_map <- simulate(P,  v, state, r_0 = b, t = max(times))
p <- make_plots()
p
param(3, .01, 0.01, 0.01, 500, 100)
system.time(stochastic <- stochastic_sim(P, b, d, state, max(times), K, v))
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P,  v, state, r_0 = b, t = max(times))
p <- make_plots()
#p <- p + ggtitle("dim = 3, v = .001, {b,d} = 0.01, K = 500, times = 1000")
p
param(3, .001, 0.01, 0.01, 500, 100)
system.time(stochastic <- stochastic_sim(P, b, d, state, max(times), K, v))
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P,  v, state, r_0 = b, t = max(times))
p <- make_plots()
#p <- p + ggtitle("dim = 3, v = .001, {b,d} = 0.01, K = 500, times = 1000")
p
param(3, .001, 0.01, 0.01, 5000, 100)
system.time(stochastic <- stochastic_sim(P, b, d, state, max(times), K, v))
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P,  v, state, r_0 = b, t = max(times))
p <- make_plots()
#p <- p + ggtitle("dim = 3, v = .001, {b,d} = 0.01, K = 500, times = 1000")
p
param(3, .0001, 0.01, 0.01, 500, 100)
system.time(stochastic <- stochastic_sim(P, b, d, state, max(times), K, v))
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P,  v, state, r_0 = b, t = max(times))
p <- make_plots()
#p <- p + ggtitle("dim = 3, v = .001, {b,d} = 0.01, K = 500, times = 1000")
p
param(3, .0001, 0.01, 0.01, 500, 1000)
system.time(stochastic <- stochastic_sim(P, b, d, state, max(times), K, v))
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P,  v, state, r_0 = b, t = max(times))
p <- make_plots()
#p <- p + ggtitle("dim = 3, v = .001, {b,d} = 0.01, K = 500, times = 1000")
p
param(3, .0001, 0.01, 0.01, 500, 100)
system.time(stochastic <- stochastic_sim(P, b, d, state, max(times), K, v))
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P,  v, state, r_0 = b, t = max(times))
p <- make_plots()
#p <- p + ggtitle("dim = 3, v = .001, {b,d} = 0.01, K = 500, times = 1000")
p
param(3, .001, 0.01, 0.01, 500, 100)
system.time(stochastic <- stochastic_sim(P, b, d, state, max(times), K, v))
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P,  v, state, r_0 = b, t = max(times))
p <- make_plots()
#p <- p + ggtitle("dim = 3, v = .001, {b,d} = 0.01, K = 500, times = 1000")
p
source('~/.active-rstudio-document', echo=TRUE)
param(3, .001, 0.01, 0.01, 500, 1000)
system.time(stochastic <- stochastic_sim(P, b, d, state, max(times), K, v))
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P,  v, state, r_0 = b, t = max(times))
p <- make_plots()
p
param(3, .01, 0.01, 0.01, 500, 100)
system.time(stochastic <- stochastic_sim(P, b, d, state, max(times), K, v))
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P,  v, state, r_0 = b, t = max(times))
p <- make_plots()
#p <- p + ggtitle("dim = 3, v = .001, {b,d} = 0.01, K = 500, times = 1000")
p
param(3, .01, 0.01, 0.01, 500, 1000)
system.time(stochastic <- stochastic_sim(P, b, d, state, max(times), K, v))
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P,  v, state, r_0 = b, t = max(times))
p <- make_plots()
#p <- p + ggtitle("dim = 3, v = .001, {b,d} = 0.01, K = 500, times = 1000")
p
param(3, .001, 0.01, 0.01, 500, 1000)
system.time(stochastic <- stochastic_sim(P, b, d, state, max(times), K, v))
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P,  v, state, r_0 = b, t = max(times))
p <- make_plots()
#p <- p + ggtitle("dim = 3, v = .001, {b,d} = 0.01, K = 500, times = 1000")
p
View(rec1)
View(rec2)
View(rec3)
View(rec1)
View(rec2)
View(rec3)
plot_all <- function(df1,df2,df3) {
base1 <- df1$time[1]
df1 <- df1[-1,]
df1 <- cbind(rec1, "Params" = "v = 0.1, b = 0.001")
base2 <- df2$time[1]
df2 <- df2[-1,]
df2 <- cbind(df2, "Params" = "v = 0.01, b = 0.01")
base3 <- df3$time[1]
df3 <- df3[-1,]
df3 <- cbind(df3, "Params" = "v = 0.001, b = 0.1")
p <- ggplot() +
geom_line(data = df1, aes(x = prob, y = time, color = Params), size = 1.5) +
geom_line(data = df2, aes(x = prob, y = time, color = Params), size = 1.5) +
geom_line(data = df3, aes(x = prob, y = time, color = Params), size = 1.5) +
scale_x_log10(limits = c(0.0001, 1), breaks = c(0.0001,0.001,0.01,0.1,1), labels = c(0.0001,0.001,0.01,0.1,1)) + xlab("\nRewiring Probability") + ylab("Time(p) / Time(0)\n") +
ylim(0, 1) +
theme(axis.text = element_text(size = 12), axis.title = element_text(size = 16, margin = margin(t = 20, l = 20, r = 20)),
legend.text = element_text(size = 10), legend.title = element_text(size = 12, margin = margin(t = 10)),
plot.title = element_text(size = 18,margin = margin(b = 30))) + guides(colour = guide_legend(title.position = "top", title.hjust = 0.5))
#        + theme(axis.line = element_line(colour = "black"),
#               panel.grid.major = element_blank(),
#               panel.grid.minor = element_blank(),
#               panel.border = element_blank(),
#               panel.background = element_blank())
p
}
View(test1)
plot_all(rec1,rec2,rec3)
plot_all <- function(df1,df2,df3) {
base1 <- df1$time[1]
df1 <- df1[-1,]
df1 <- cbind(rec1, "Params" = "v = 0.1, b = 0.001")
base2 <- df2$time[1]
df2 <- df2[-1,]
df2 <- cbind(df2, "Params" = "v = 0.01, b = 0.01")
base3 <- df3$time[1]
df3 <- df3[-1,]
df3 <- cbind(df3, "Params" = "v = 0.001, b = 0.1")
p <- ggplot() +
geom_line(data = df1, aes(x = prob, y = time, color = Params), size = 1.5) +
geom_line(data = df2, aes(x = prob, y = time, color = Params), size = 1.5) +
geom_line(data = df3, aes(x = prob, y = time, color = Params), size = 1.5) +
scale_x_log10(limits = c(0.0001, 1), breaks = c(0.0001,0.001,0.01,0.1,1), labels = c(0.0001,0.001,0.01,0.1,1)) + xlab("\nRewiring Probability") + ylab("Time(p) / Time(0)\n")  +
theme(axis.text = element_text(size = 12), axis.title = element_text(size = 16, margin = margin(t = 20, l = 20, r = 20)),
legend.text = element_text(size = 10), legend.title = element_text(size = 12, margin = margin(t = 10)),
plot.title = element_text(size = 18,margin = margin(b = 30))) + guides(colour = guide_legend(title.position = "top", title.hjust = 0.5))
#        + theme(axis.line = element_line(colour = "black"),
#               panel.grid.major = element_blank(),
#               panel.grid.minor = element_blank(),
#               panel.border = element_blank(),
#               panel.background = element_blank())
p
}
plot_all(rec1,rec2,rec3)
make_plots <- function(determ_df = out, stoch_df = stochastic, map_df = out_map) {
names(map_df)[-1] <- 1:parameters$dimension
map_df <- melt(map_df, id.vars = "time", variable.name = "patch",
value.name = "population")
map_df <- cbind(map_df, "model" = "map")
determ_df <- data.frame(determ_df)
names(determ_df)[-1] <- 1:parameters$dimension
determ_df <- melt(determ_df, id.vars = "time", variable.name = "patch",
value.name = "population")
determ_df <- cbind(determ_df, "model" = "determ")
names(stoch_df)[-1] <- 1:parameters$dimension
stoch_df <- melt(stoch_df, id.vars = "Time", variable.name = "patch",
value.name = "population")
stoch_df <- cbind(stoch_df, "model" = "stoch")
p <- ggplot() +
geom_line(data = determ_df, aes(x = time, y = population, color = patch, linetype = model), size = 1.0) +
#geom_line(data = stoch_df, aes(x = Time, y = population, color = patch, linetype = model),size = 1.0) +
geom_point(data = subset(map_df, time %% 40 == 1), aes(x = time, y = population, color = patch, linetype = model), size = 3.0) +
theme(axis.text = element_text(size = 12), axis.title = element_text(size = 16, margin = margin(t = 20, l = 20, r = 20)),
legend.text = element_text(size = 10), legend.title = element_text(size = 12, margin = margin(t = 10)),
plot.title = element_text(size = 18,margin = margin(b = 30))) + guides(colour = guide_legend(title.position = "top", title.hjust = 0.5)) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
xlab("\nTime") + ylab("Population\n")
}
param(2, .001, 0.01, 0.01, 500, 1000)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P,  v, state, r_0 = b, t = max(times))
p <- make_plots()
p
param(2, 0.25, 0.01, 0.01, 500, 1000)
p <- make_plots()
p
>>>>>>> 384988c31483afa2e9445e44c005a4d1713f5083
shiny::runApp('C:/Users/Ryan/Desktop/Gap Year/invasion_simulation')
shiny::runApp('C:/Users/Ryan/Desktop/Gap Year/invasion_simulation')
