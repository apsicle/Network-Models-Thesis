out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
#p <- p + ggtitle("dim = 2, v = 0.001, {b,d} = 0.01, K = 500, times = 1000")
p
param(2, 0.001, 0.01, 0.01, 500, 1000)
param(3, .0001, 0.01, 0.01, 500, 1000)
system.time(stochastic <- stochastic_sim(P, b, d, state, max(times), K, v))
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
#p <- p + ggtitle("dim = 2, v = 0.001, {b,d} = 0.01, K = 500, times = 1000")
p
param(2, 0.001, 0.01, 0.01, 500, 1000)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p
plot_all <- function(df1,df2,df3) {
options(scipen=10000) #forces r not to abbreviate w/ sci notation
base1 <- df1$time[1]
df1 <- df1[-1,]
df1 <- cbind(df1, "Params" = "v = 0.001, r = 0.01")
base2 <- df2$time[1]
df2 <- df2[-1,]
df2 <- cbind(df2, "Params" = "v = 0.01, r = 0.01")
base3 <- df3$time[1]
df3 <- df3[-1,]
df3 <- cbind(df3, "Params" = "v = 0.1, r = 0.01")
p <- ggplot() +
geom_line(data = df1, aes(x = prob, y = time / base1, color = Params), size = 1.5) +
geom_line(data = df2, aes(x = prob, y = time / base2, color = Params), size = 1.5) +
geom_line(data = df3, aes(x = prob, y = time / base3, color = Params), size = 1.5) +
scale_x_log10(limits = c(0.0001, 1), breaks = c(0.0001,0.001,0.01,0.1,1), labels = c(0.0001,0.001,0.01,0.1,1)) + xlab("\nRewiring Probability") + ylab("Time(p) / Time(0)\n")  +
theme(axis.text = element_text(size = 14), axis.title = element_text(size = 18, margin = margin(t = 20, l = 20, r = 20)),
legend.text = element_text(size = 16), legend.title = element_text(size = 18, margin = margin(t = 10)), legend.key = element_blank(),
plot.title = element_text(size = 18,margin = margin(b = 30))) + guides(colour = guide_legend(title.position = "top", title.hjust = 0.5)) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
p
}
plot_all(recv3, recv2, recv1)
plot_all <- function(df1,df2,df3) {
options(scipen=10000) #forces r not to abbreviate w/ sci notation
base1 <- df1$time[1]
df1 <- df1[-1,]
df1 <- cbind(df1, "Params" = "v = 0.001, r = 0.01")
base2 <- df2$time[1]
df2 <- df2[-1,]
df2 <- cbind(df2, "Params" = "v = 0.01, r = 0.01")
base3 <- df3$time[1]
df3 <- df3[-1,]
df3 <- cbind(df3, "Params" = "v = 0.1, r = 0.01")
p <- ggplot() +
geom_line(data = df1, aes(x = prob, y = time / base1, color = Params), size = 1.5) +
geom_line(data = df2, aes(x = prob, y = time / base2, color = Params), size = 1.5) +
geom_line(data = df3, aes(x = prob, y = time / base3, color = Params), size = 1.5) +
scale_x_log10(limits = c(0.0001, 1), breaks = c(0.0001,0.001,0.01,0.1,1), labels = c(0.0001,0.001,0.01,0.1,1)) + xlab("\nRewiring Probability") + ylab("T(p) / T(0)\n")  +
theme(axis.text = element_text(size = 14), axis.title = element_text(size = 18, margin = margin(t = 20, l = 20, r = 20)),
legend.text = element_text(size = 16), legend.title = element_text(size = 18, margin = margin(t = 10)), legend.key = element_blank(),
plot.title = element_text(size = 18,margin = margin(b = 30))) + guides(colour = guide_legend(title.position = "top", title.hjust = 0.5)) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
p
}
plot_all(recv3, recv2,recv1)
plot_all(recb3,recb2,recb1)
plot_all <- function(df1,df2,df3) {
options(scipen=10000) #forces r not to abbreviate w/ sci notation
base1 <- df1$time[1]
df1 <- df1[-1,]
df1 <- cbind(df1, "Params" = "v = 0.01, r = 0.001")
base2 <- df2$time[1]
df2 <- df2[-1,]
df2 <- cbind(df2, "Params" = "v = 0.01, r = 0.01")
base3 <- df3$time[1]
df3 <- df3[-1,]
df3 <- cbind(df3, "Params" = "v = 0.01, r = 0.1")
p <- ggplot() +
geom_line(data = df1, aes(x = prob, y = time / base1, color = Params), size = 1.5) +
geom_line(data = df2, aes(x = prob, y = time / base2, color = Params), size = 1.5) +
geom_line(data = df3, aes(x = prob, y = time / base3, color = Params), size = 1.5) +
scale_x_log10(limits = c(0.0001, 1), breaks = c(0.0001,0.001,0.01,0.1,1), labels = c(0.0001,0.001,0.01,0.1,1)) + xlab("\nRewiring Probability") + ylab("T(p) / T(0)\n")  +
theme(axis.text = element_text(size = 14), axis.title = element_text(size = 18, margin = margin(t = 20, l = 20, r = 20)),
legend.text = element_text(size = 16), legend.title = element_text(size = 18, margin = margin(t = 10)), legend.key = element_blank(),
plot.title = element_text(size = 18,margin = margin(b = 30))) + guides(colour = guide_legend(title.position = "top", title.hjust = 0.5)) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
p
}
plot_all(recb3,recb2,recb1)
View(rec1)
plot_all <- function(df1,df2,df3) {
options(scipen=10000) #forces r not to abbreviate w/ sci notation
base1 <- df1$time[1]
df1 <- df1[-1,]
df1 <- cbind(df1, "Params" = "v = 0.1, r = 0.001")
base2 <- df2$time[1]
df2 <- df2[-1,]
df2 <- cbind(df2, "Params" = "v = 0.01, r = 0.01")
base3 <- df3$time[1]
df3 <- df3[-1,]
df3 <- cbind(df3, "Params" = "v = 0.001, r = 0.1")
p <- ggplot() +
geom_line(data = df1, aes(x = prob, y = time / base1, color = Params), size = 1.5) +
geom_line(data = df2, aes(x = prob, y = time / base2, color = Params), size = 1.5) +
geom_line(data = df3, aes(x = prob, y = time / base3, color = Params), size = 1.5) +
scale_x_log10(limits = c(0.0001, 1), breaks = c(0.0001,0.001,0.01,0.1,1), labels = c(0.0001,0.001,0.01,0.1,1)) + xlab("\nRewiring Probability") + ylab("T(p) / T(0)\n")  +
theme(axis.text = element_text(size = 14), axis.title = element_text(size = 18, margin = margin(t = 20, l = 20, r = 20)),
legend.text = element_text(size = 16), legend.title = element_text(size = 18, margin = margin(t = 10)), legend.key = element_blank(),
plot.title = element_text(size = 18,margin = margin(b = 30))) + guides(colour = guide_legend(title.position = "top", title.hjust = 0.5)) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
p
}
plot_all(rec1,rec2,rec3)
plot_all <- function(df1,df2,df3) {
options(scipen=10000) #forces r not to abbreviate w/ sci notation
base1 <- df1$time[1]
df1 <- df1[-1,]
df1 <- cbind(df1, "Params" = "v = 0.1, r = 0.001")
base2 <- df2$time[1]
df2 <- df2[-1,]
df2 <- cbind(df2, "Params" = "v = 0.01, r = 0.01")
base3 <- df3$time[1]
df3 <- df3[-1,]
df3 <- cbind(df3, "Params" = "v = 0.001, r = 0.1")
p <- ggplot() +
geom_line(data = df1, aes(x = prob, y = time, color = Params), size = 1.5) +
geom_line(data = df2, aes(x = prob, y = time, color = Params), size = 1.5) +
geom_line(data = df3, aes(x = prob, y = time, color = Params), size = 1.5) +
scale_x_log10(limits = c(0.0001, 1), breaks = c(0.0001,0.001,0.01,0.1,1), labels = c(0.0001,0.001,0.01,0.1,1)) + xlab("\nRewiring Probability") + ylab("T(p)\n")  +
theme(axis.text = element_text(size = 14), axis.title = element_text(size = 18, margin = margin(t = 20, l = 20, r = 20)),
legend.text = element_text(size = 16), legend.title = element_text(size = 18, margin = margin(t = 10)), legend.key = element_blank(),
plot.title = element_text(size = 18,margin = margin(b = 30))) + guides(colour = guide_legend(title.position = "top", title.hjust = 0.5)) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
p
}
plot_all(rec1,rec2,rec3)
plot_all <- function(df1,df2,df3) {
options(scipen=10000) #forces r not to abbreviate w/ sci notation
base1 <- df1$time[1]
df1 <- df1[-1,]
df1 <- cbind(df1, "Params" = "v = 0.01, r = 0.001")
base2 <- df2$time[1]
df2 <- df2[-1,]
df2 <- cbind(df2, "Params" = "v = 0.01, r = 0.01")
base3 <- df3$time[1]
df3 <- df3[-1,]
df3 <- cbind(df3, "Params" = "v = 0.01, r = 0.1")
p <- ggplot() +
geom_line(data = df1, aes(x = prob, y = time / base1, color = Params), size = 1.5) +
geom_line(data = df2, aes(x = prob, y = time / base2, color = Params), size = 1.5) +
geom_line(data = df3, aes(x = prob, y = time / base3, color = Params), size = 1.5) +
scale_x_log10(limits = c(0.0001, 1), breaks = c(0.0001,0.001,0.01,0.1,1), labels = c(0.0001,0.001,0.01,0.1,1)) + xlab("\nRewiring Probability") + ylab("T(p) / T(0)\n")  +
theme(axis.text = element_text(size = 14), axis.title = element_text(size = 18, margin = margin(t = 20, l = 20, r = 20)),
legend.text = element_text(size = 16), legend.title = element_text(size = 18, margin = margin(t = 10)), legend.key = element_blank(),
plot.title = element_text(size = 18,margin = margin(b = 30))) + guides(colour = guide_legend(title.position = "top", title.hjust = 0.5)) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
p
}
plot_all(recb1,recb2,recb3)
View(recb3)
View(recb32)
View(recb1)
plot_all(recb3,recb2,recb1)
View(recb1)
View(recb3)
plot_all <- function(df1,df2,df3) {
options(scipen=10000) #forces r not to abbreviate w/ sci notation
base1 <- df1$time[1]
df1 <- df1[-1,]
df1 <- cbind(df1, "Params" = "v = 0.01, r = 0.001")
base2 <- df2$time[1]
df2 <- df2[-1,]
df2 <- cbind(df2, "Params" = "v = 0.01, r = 0.01")
base3 <- df3$time[1]
df3 <- df3[-1,]
df3 <- cbind(df3, "Params" = "v = 0.01, r = 0.1")
p <- ggplot() +
geom_line(data = df1, aes(x = prob, y = time, color = Params), size = 1.5) +
geom_line(data = df2, aes(x = prob, y = time, color = Params), size = 1.5) +
geom_line(data = df3, aes(x = prob, y = time, color = Params), size = 1.5) +
scale_x_log10(limits = c(0.0001, 1), breaks = c(0.0001,0.001,0.01,0.1,1), labels = c(0.0001,0.001,0.01,0.1,1)) + xlab("\nRewiring Probability") + ylab("T(p)\n")  +
theme(axis.text = element_text(size = 14), axis.title = element_text(size = 18, margin = margin(t = 20, l = 20, r = 20)),
legend.text = element_text(size = 16), legend.title = element_text(size = 18, margin = margin(t = 10)), legend.key = element_blank(),
plot.title = element_text(size = 18,margin = margin(b = 30))) + guides(colour = guide_legend(title.position = "top", title.hjust = 0.5)) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
p
}
plot_all(rec3, rec2, rec1)
plot_all(recb3, recb2, recb1)
plot_all(recv3, recv2, recv1)
plot_all(rec3, rec2, rec1)
plot_all(recb3, recb2, recb1)
source("params.R")
source("stochastic_sim_nd.R")
source("deterministic_ode.R")
source("make_plots.R")
param(2, 0.001, 0.01, 0.01, 100, 10)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p
?ode
times
times = [0:10:2]
0:10:1
0:1:10
0:0.6:10
0.6:1:10
0:1:10
0.5:1:10
0.5:0.75:10
0.00006:0.75:10
0.00006::0.75:10
seq(0,10,0.5)
seq(0,10,0.1)
times = seq(0,10,0.1)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p
View(determ_df)
times
determ_df <- data.frame(out)
determ_df <- data.frame(determ_df)
names(determ_df)[-1] <- 1:parameters$dimension
determ_df <- melt(determ_df, id.vars = "time", variable.name = "patch",
value.name = "population")
determ_df <- cbind(determ_df, "model" = "determ")
View(determ_df)
View(out)
determ_df <- data.frame(determ_df)
names(determ_df)[-1] <- 1:parameters$dimension
determ_df <- melt(determ_df, id.vars = "time", variable.name = "patch",
View(determ_df)
View(out_map)
View(determ_df)
p <- make_plots()
p
param(2, 0.001, 0.01, 0.01, 100, 1000)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p
param(3, .01, 0.01, 0.01, 500, 1000)
param(3, .01, 0.01, 0.01, 500, 100)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
p <- make_plots()
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p
param(2, 0.01, 0.01, 0.01, 100, 100)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p
param(2, 0.25, 0.01, 0.01, 100, 100)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p
param(2, 0.001, 0.01, 0.01, 100, 500)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p
param(2, 0.001, 0.01, 0.01, 100, 1000)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p
param(2, 0.001, 0.01, 0.01, 100, 10)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
#p <- p + ggtitle("dim = 2, v = 0.001, {b,d} = 0.01, K = 500, times = 1000")
p
require(reshape2)
make_plots <- function(determ_df = out, stoch_df = stochastic, map_df = out_map) {
names(map_df)[-1] <- 1:parameters$dimension
map_df <- melt(map_df, id.vars = "time", variable.name = "patch",
value.name = "population")
map_df <- cbind(map_df, "model" = "map")
determ_df <- data.frame(determ_df)
names(determ_df)[-1] <- 1:parameters$dimension
determ_df <- melt(determ_df, id.vars = "time", variable.name = "patch",
value.name = "population")
determ_df <- cbind(determ_df, "model" = "determ")
names(stoch_df)[-1] <- 1:parameters$dimension
stoch_df <- melt(stoch_df, id.vars = "Time", variable.name = "patch",
value.name = "population")
stoch_df <- cbind(stoch_df, "model" = "stoch")
p <- ggplot() +
geom_line(data = determ_df, aes(x = time, y = population, color = patch, linetype = model), size = 1.0) +
#geom_line(data = stoch_df, aes(x = Time, y = population, color = patch, linetype = model),size = 1.0) +
#geom_point(data = subset(map_df, time %% 40 == 1), aes(x = time, y = population, color = patch, linetype = model), size = 3.0) +
geom_point(data = map_df, aes(x = time, y = population, color = patch, linetype = model), size = 3.0) +
theme(axis.text = element_text(size = 14), axis.title = element_text(size = 18, margin = margin(t = 20, l = 20, r = 20)),
legend.text = element_text(size = 16), legend.title = element_text(size = 18, margin = margin(t = 10)), legend.key = element_blank(),
plot.title = element_text(size = 18,margin = margin(b = 30))) + guides(colour = guide_legend(title.position = "top", title.hjust = 0.5)) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
xlab("\nTime") + ylab("Population\n")
}
param(2, 0.25, 0.01, 0.01, 100, 10)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
#p <- p + ggtitle("dim = 2, v = 0.001, {b,d} = 0.01, K = 500, times = 1000")
p
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
times = seq(0,10,0.1)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
p <- make_plots()
p <- p + ggtitle("dim = 2, v = 0.001, {b,d} = 0.01, K = 500, times = 1000")
p
p <- make_plots()
p
times = seq(0,10,0.001)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
p <- make_plots()
p
param(2, 0.001, 0.01, 0.01, 100, 10)
param(2, 0.25, 0.01, 0.01, 100, 10-)
param(2, 0.25, 0.01, 0.01, 100, 100)
times = seq(0,10,0.001)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p
times = seq(0,100,0.001)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p
param(2, 0.001, 0.01, 0.01, 100, 10)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p
times = seq(0,10,0.001)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p
param(2, 0.001, 0.01, 0.01, 100, 1000)
out <- ode(y = state, times = times, func = deterministic_ode_solve, parms = parameters)
out_map <- simulate(P, v, state, b, max(times))
p <- make_plots()
p
source('C:/Users/Ryan/Desktop/Thesis/make_plots.R', echo=TRUE)
rep(runif())
runif()
runif()
runif(1)
runif(0,1)
sample?
?sample
sample(0,10,1)
sample(10,10,1)
sample(10,10)
sample(1,10)
sample(1:100, 100, TRUE)
3%%15
3%/%15
3%15
source('C:/Users/Ryan/Desktop/Gap Year/eggdrop.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
average(100,100)
average(100,1000)
28%%14
+28/2
4%%15
4%%14
4%/%14
14%%14
16%%14
16%/%14
fourteen <- function(n, k) {
#n = number of total levels.
#N = level at which egg breaks, generated randomly.
#k = number of trials to run
runs <- sample(1:n, k, TRUE)
mysolution <- function(N) {
return (N %% 14) + (N %/% 14) + 1
}
sapply(runs, mysolution)
}
average <- function(n, k) {
#gets distribution of results
fourteen(n, k)
}
average(100,1000)
average(100,100)
fourteen <- function(n, k) {
#n = number of total levels.
#N = level at which egg breaks, generated randomly.
#k = number of trials to run
runs <- sample(1:n, k, TRUE)
mysolution <- function(N) {
return (N %% 14) + (N %/% 14) + 1
}
sapply(runs, mysolution)
}
fourteen(100,100)
debug(fourteen)
fourteen(100,100)
16%%15
1+(16%/%15)
fourteen <- function(n, k) {
#n = number of total levels.
#N = level at which egg breaks, generated randomly.
#k = number of trials to run
runs <- sample(1:n, k, TRUE)
mysolution <- function(N) {
return ((N %% 14) + (N %/% 14) + 1)
}
sapply(runs, mysolution)
}
average <- function(n, k) {
#gets distribution of results
fourteen(n, k)
}
average(100,100)
average(100,100)
average(100,100)
average(100,100)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
average(100,100)
average(100,100)
average(100,100)
average(100,100)
source('~/.active-rstudio-document', echo=TRUE)
fourteen <- function(n, k) {
#n = number of total levels.
#N = level at which egg breaks, generated randomly.
#k = number of trials to run
runs <- sample(1:n, k, TRUE)
mysolution <- function(N) {
add = 1
if(N %% 14 == 0) {
add = 2
}
return ((N %% 14) + (N %/% 14) + add)
}
results <- sapply(runs, mysolution)
data.frame(N = runs, Results = results)
}
average <- function(n, k) {
#gets distribution of results
fourteen(n, k)
}
average(100,10000)
average(100,100)
source('~/.active-rstudio-document', echo=TRUE)
average(100,100)
source('~/.active-rstudio-document', echo=TRUE)
average(100,100)
69%%14
69%/%14
69*4
14*4
14*5
fourteen <- function(n, k) {
#n = number of total levels.
#N = level at which egg breaks, generated randomly.
#k = number of trials to run
runs <- sample(1:n, k, TRUE)
mysolution <- function(N) {
return (N %% 14) + (N %/% 14) + 1
}
results <- sapply(runs, mysolution)
data.frame(N = runs, Results = results)
}
average <- function(n, k) {
#gets distribution of results
fourteen(n, k)
}
average(100,100)
source('~/.active-rstudio-document', echo=TRUE)
average(100,100)
